<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Estructuras de Control on Notae Chipacus ü§ì AED 23 | K1.6</title><link>https://chipacu.github.io/aed-docs/docs/estruc-control/</link><description>Recent content in Estructuras de Control on Notae Chipacus ü§ì AED 23 | K1.6</description><generator>Hugo -- gohugo.io</generator><language>es-ar</language><atom:link href="https://chipacu.github.io/aed-docs/docs/estruc-control/index.xml" rel="self" type="application/rss+xml"/><item><title>Condicionales</title><link>https://chipacu.github.io/aed-docs/docs/estruc-control/condicionales/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chipacu.github.io/aed-docs/docs/estruc-control/condicionales/</guid><description>Condicionales # Hasta este punto, los algoritmos que hemos definido se ejecutan de manera secuencial, es decir, una sentencia despu√©s de otra. Esta forma de programaci√≥n es adecuada para programas simples.
flowchart LR START:::hidden --> accion1 accion1[Acci√≥n 1] accion1 --> accion2 accion2[Acci√≥n 2] accion2 --> STOP:::hidden classDef hidden display: none; ACCION Ejemplo1 ES AMBIENTE a,doble: entero PROCESO ESCRIBIR(‚ÄúIngrese el n√∫mero: ‚Äù) LEER(a) doble := a * 2 ESCRIBIR(‚ÄúResultado es: ‚Äù,doble) FIN_ACCION Sin embargo, para resolver problemas m√°s complejos, es necesario tener la capacidad de controlar qu√© sentencias se ejecutan y cu√°ndo.</description></item><item><title>Repetitivas</title><link>https://chipacu.github.io/aed-docs/docs/estruc-control/repetitivas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chipacu.github.io/aed-docs/docs/estruc-control/repetitivas/</guid><description>Repetitivas # Durante la creaci√≥n de programas, es com√∫n encontrarse con la necesidad de repetir operaciones varias veces. Para esto, es importante conocer las estructuras de algoritmos que permiten la repetici√≥n de acciones un n√∫mero determinado de veces.
graph TB START:::hidden --> accion1 accion1[Accion 1] --> input{Condici√≥n} input -- Verdadero --> execute[Instrucciones del Bucle] execute --> input input -- Falso --> accion2[Accion2] accion2 --> END:::hidden Estas estructuras se llaman bucles y cada repetici√≥n del bucle se denomina iteraci√≥n.</description></item></channel></rss>