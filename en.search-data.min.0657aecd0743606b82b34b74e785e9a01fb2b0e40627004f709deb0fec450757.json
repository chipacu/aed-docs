[{"id":0,"href":"/aed-docs/docs/info-provechosa/","title":"Info Provechosa","section":"Docs","content":""},{"id":1,"href":"/aed-docs/docs/info-provechosa/condiciones/","title":"Condiciones","section":"Info Provechosa","content":" Modos y Condiciones para vencer # Modo de evaluarnos # En tu traves√≠a acad√©mica por los dominios de los algoritmos, ser√°s sometido a las siguientes pruebas y desaf√≠os:\n3 Parciales, precedidos de un Trabajo Pr√°ctico cada uno. 2 Laboratorios, uno de Pascal y otro de C. 20 Cuestionarios del Campus Virtual. Condiciones para aprobar # Para obtener el triunfo y aprobar de forma directa, deber√°s superar los siguientes desaf√≠os con destreza y sabidur√≠a:\nAprobar los 3 parciales con 6 o m√°s. Aprobar el Laboratorio de Pascal. Aprobar el Laboratorio de C. Promediar 6 o m√°s en los cuestionarios del aula. Tener asistencia m√≠nima de 75%. Recuerda que, en caso de necesitarlo, tendr√°s la oportunidad de recuperar un solo parcial.\nY en cuanto a la aprobaci√≥n de la cursada, tendr√°s las mismas condiciones que en la forma directa, pero podr√°s recuperar todos los parciales y laboratorios.\nEn caso de p√©rdida de regularidad # Conforme a la Ordenanza N¬∞ 6908-U, en circunstancias excepcionales, como en el notable incremento de estudiantes recursantes en esta materia, la Secretar√≠a Aused√©mica ha dispuesto una medida extraordinaria para aquellos que no hayan cumplido con los requisitos m√≠nimos.\nPara solicitar la aplicaci√≥n de esta medida excepcional, se requiere completar el siguiente formulario de manera precisa y detallada:\nSolicitud de Regularidad "},{"id":2,"href":"/aed-docs/docs/info-provechosa/excalibur/","title":"Excalibur","section":"Info Provechosa","content":" Links de Excalibur # ¬°El legendario Biolin se alza frente a ti! En este prodigioso artefacto, descubrir√°s enlaces de gran val√≠a y la posibilidad de completar los formularios de asistencia a clase.\nSin embargo, ten cuidado, pues sus ra√≠ces ocultas podr√≠an asfixiarte de informaci√≥n publicitaria. Te sugiero sin reparo, que lo abras en una pesta√±a de inc√≥gnito con un ad-blocker de ser posible.\nBiolin ‚ò†Ô∏è Pocas p√°ginas ostentan tanta belleza y utilidad como la aqu√≠ presentada. Sin embargo, su misterio tambi√©n puede sembrar el terror entre los estudiantes insomnes.\nGu√≠a de Pr√°ctica Y por √∫ltimo, el enlace m√°s controvertido, del cual no estoy seguro si incomoda a la c√°tedra. Si as√≠ fuese, ruego que me lo hagan saber para borrarlo de la existencia.\nEjercicios Resueltos (github) Sin embargo, quiero dejar en claro que mi intenci√≥n con este repositorio es noble: compartir ayuda para aquellos que no comprendan algunos ejercicios y, a su vez, recibir asistencia cuando yo no entienda otros. Adem√°s, considero que este m√©todo es m√°s c√≥modo para consumir y distribuir que la forma en que muchos comparten archivos sueltos o capturas. No anticipio problemas, ya que he encontrado al menos dos repositorios similares que aparentemente no han enfrentado inconvenientes. Me arriesgo por esta causa.\n"},{"id":3,"href":"/aed-docs/docs/info-provechosa/profesores/","title":"Profesores","section":"Info Provechosa","content":" Nuestros Profesores # ¬°Honrad a aquellos que nos gu√≠an con sabidur√≠a y experiencia!\nTeor√≠a Mirtha Giovannini Pr√°ctica Axel Robles Valentina Sosa Mar√≠a Jos√© Ojeda Celina Gonz√°lez Florencia Galarza Renzo Urturi Santiago Scacciaferro Wyss "},{"id":4,"href":"/aed-docs/docs/teoria/acciones-simples/","title":"Acciones Simples","section":"Docs","content":" Acciones Simples # Son una recopilaci√≥n de funciones que se utilizan en los primeros algoritmos sin una clasificaci√≥n precisa. Aclaro que en el material te√≥rico no se explican detalladamente, sino que se empiezan a utilizar directamente. La informaci√≥n que compartir√© a continuaci√≥n est√° basada en las presentaciones de las clases pr√°cticas, as√≠ como en algunos recursos adicionales que me he robado de por ah√≠.\nEst√°n advertidos üôÑ\u0026hellip;\nAntes de escribir pseudoc√≥digo # ¬°Atenci√≥n a todos los estudiantes!\nAntes de sumergirse en la escritura de pseudoc√≥digo, es importante considerar las herramientas adecuadas para esta tarea. Y aqu√≠ viene una advertencia importante: ¬°no caigas en la tentaci√≥n de usar el Block de Notas!\nEl Block de Notas es b√°sico, ineficiente y propenso a errores de indentaci√≥n. No querr√°s arruinar tus algoritmos debido a un simple descuido. Por eso, te recomiendo encarecidamente que descargues cualquier otro editor de c√≥digo disponible.\nEntre las opciones m√°s populares y recomendadas, encontramos Visual Studio Code (no confundir con Visual Studio). Este potente editor de c√≥digo te brindar√° una experiencia de escritura c√≥moda y ordenada. Adem√°s, cuenta con una amplia gama de extensiones que pueden mejorar tu flujo de trabajo y hacer que la programaci√≥n sea m√°s placentera.\nAs√≠ que no lo dudes, deja atr√°s la vagancia y descarga un editor de c√≥digo adecuado. ¬°Te aseguro que notar√°s la diferencia y tus algoritmos te lo agradecer√°n! üòâ\nEstructura de un Programa B√°sico # Accion Un_ejemplo es Ambiente // aqu√≠ se declaran variables/c, se definen funciones/p... Algoritmo // donde ocurre la magia... fin accion Cuidado con la indentaci√≥n # La ¬´indentaci√≥n¬ª en criollo, es cuando nos referirnos a la sangr√≠a del c√≥digo. Por ahora no es indispensable, pero si se recomienda usarla, de lo contrario muere un perrito.\nNo, en serio, indent√° bien üôÖ‚Äç‚ôÇÔ∏è, es un horror ver el c√≥digo todo descuajeringado.\nSin indentar ü§¨ Para i := 1 a 10 hacer Si i mod 2 = 0 entonces Escribir(i) Fin si Fin Para Mal indentado üíÄ Para i := 1 a 10 hacer Si i mod 2 = 0 entonces Escribir(i) Fin si Fin Para Bien indentado üòá Para i := 1 a 10 hacer Si i mod 2 = 0 entonces Escribir(i) Fin si Fin Para Tengo la constumbre de usar 4 espacios, que es la configuaraci√≥n por defecto en muchos editores de c√≥digo, en lenguajes como python en impresindible que sea as√≠.\nComentarios # Todo texto que se escriba despu√©s de // es un comentario, y no afecta en la ejecuci√≥n del c√≥digo.\n// soy un comentario no soy un comentario Los programadores buscan constantemente la perfecci√≥n, pero la mente humana puede ser olvidadiza. Documentar el c√≥digo se vuelve invaluable, especialmente cuando otros lo revisan. Como portadores de estos conocimientos, debemos perseverar en esta tarea. No escatimes en comentarios, ya que son esenciales para la comprensi√≥n y comunicaci√≥n.\nSalida de datos # Como un susurro de conocimiento, la palabra ¬´escribir¬ª transmite los resultados del programa al mundo exterior. Los datos, imbuidos de sentido y prop√≥sito, pueden ser plasmados por pantalla.\nEscribir( \u0026lt;UN TEXTO\u0026gt; ) // debes reemplazar \u0026lt;UN TEXTO\u0026gt; con el texto o expresi√≥n que quieras. Ejemplos:\nEscribir(‚Äúhola mundooo!!!‚Äù) Escribir(‚Äúlo siguiente es una variable: ‚Äù, var_1) Escribir(‚Äúlo siguiente es un resultado: ‚Äù, var_1 + var_2) Entrada de datos # Similar a un ritual ancestral, el programador puede abrir las puertas de la interacci√≥n con el usuario. Creando as√≠ un v√≠nculo entre el reino digital y el mundo tangible, una conexi√≥n que permite que los datos ingresados desde afuera se asignen a una variable ya definida.\nLeer( \u0026lt;VARIABLE\u0026gt; ) // Se le asigna un valor ingresado por teclado a la variable que se nombr√≥ entre \u0026lt;\u0026gt;. Ejemplos:\nLeer(a) Leer(primer-nombre) Leer(una_variable, otra_variable, ...) üî• Importante!\nSiempre antes de ocupar un Leer() es recomendable ocupar un Escribir() con un mensaje detallando qu√© queremos que el usuario ingrese por pantalla.\nEscribir(‚ÄúIngrese la fecha de forma de Dia, Mes y A√±o: ‚Äù) Leer(Dia, Mes, Anio) "},{"id":5,"href":"/aed-docs/docs/teoria/concept-iniciales/algoritmos/","title":"Algoritmos","section":"Docs","content":" Concepto de Algor√≠tmos # En un mundo digital cada vez m√°s complejo, los algoritmos emergen como poderosas secuencias de instrucciones y reglas que desbloquean las puertas del conocimiento, trazando caminos que resuelven problemas y moldean nuestras experiencias.\nFormalmente hablando, ser√≠a:\nNoun: Algor√≠tmo /Ààal…°…ôr…™√∞(…ô)m/ Una secuencia finita de instrucciones, que describen de modo preciso las operaciones que una computadora debe realizar para ejecutar una tarea determinada en un tiempo finito. Los pasos para crear un algoritmo son los siguientes:\nIdentificar los resultados esperados: Es fundamental tener claros los objetivos que se desean alcanzar y comprender el problema que se busca resolver.\nDeterminar los datos de entrada: Es necesario evaluar si los datos disponibles son suficientes para lograr los resultados deseados. Se deben definir los datos con los que se trabajar√°.\nPlantear los procesos necesarios: Si se cuenta con los datos completos y los objetivos est√°n claros, se deben establecer los pasos o procesos requeridos para transformar los datos de entrada en los datos de salida.\nUn algoritmo resuelve problemas cuando se dise√±a una secuencia ordenada de pasos, que despues se convierte en un programa usando un lenguaje de programaci√≥n y luego este se ejecuta y verifica en una computadora para asegurar de su correcto funcionamiento.\nCaracter√≠sticas de los algor√≠tmos # Todo algoritmo tiene estas caracter√≠sticas fundamentales:\nSer preciso y mostrar el orden de los pasos. Estar bien definido, dando el mismo resultado cada vez que se sigue. Ser finito, es decir, tener un n√∫mero limitado de pasos y terminar en alg√∫n momento. Ser correcto, produciendo el resultado esperado. Ser independiente del lenguaje de programaci√≥n y la computadora utilizada. La definici√≥n de un algoritmo debe describir tres partes: Entrada, Proceso y Salida. Ejemplo 1\nDesarrolle un algoritmo que determine si un n√∫mero es par o impar.\nSoluci√≥n\nPrimero vamos a indicar cu√°les ser√≠an las partes necesarias:\nEntrada: Solicitar al usuario que ingrese un n√∫mero X Proceso: Dividir por dos el n√∫mero X. Salida: Si el resto de la divisi√≥n es 0, entonces informar el n√∫mero X es par. Sino informar que es impar. "},{"id":6,"href":"/aed-docs/docs/teoria/concept-iniciales/proceso-accion-estado/","title":"Proceso Accion Estado","section":"Docs","content":" Proceso, Acci√≥n y Estado # Proceso # Un proceso, en su esencia m√°s pura, es una diminuta entidad, cuidadosamente planificada por un Sistema Operativo, emerge como una unidad elemental de trabajo.\nFormalmente:\nNoun: Proceso /process/ Una unidad de actividad que se caracteriza por la ejecuci√≥n de una secuencia de instrucciones, un estado actual, y un conjunto de recursos de los sistemas asociados (hardware). Acci√≥n # En el anterior \u0026ldquo;ejemplo 1\u0026rdquo; de algoritmos, notar√°s que cada paso comienza con un verbo como \u0026ldquo;Solicitar\u0026rdquo;, \u0026ldquo;Ingresar\u0026rdquo;, \u0026ldquo;Dividir\u0026rdquo;, entre otros. Los verbos representan acciones, y todos sabemos que implican hacer algo.\nSeg√∫n la academia:\nNoun: Acci√≥n /ac-yion/ Es un acontecimiento producido por un actor que tiene un tiempo finito (per√≠odo), produce un resultado definido y preciso y tambi√©n produce un cambio de estado. Puede parecer contradictorio, pero \u0026ldquo;construir una casa\u0026rdquo; es una acci√≥n que est√° compuesta por otras acciones.\nLas acciones se dividen en dos tipos:\nsimples, que se pueden hacer directamente. complejas, que requieren descomponerse en acciones m√°s simples. La percepci√≥n de lo que es simple o complejo var√≠a de una persona a otra y depende de sus habilidades y del enfoque que le den al problema.\nClasificaci√≥n de Acciones # A lo largo de nuestro viaje por esta materia, desvelaremos los secretos de estas acciones. No obstante, debes comprender cu√°ndo desatar cada tipo de acci√≥n en el momento preciso, es de vital importancia.\nstateDiagram-v2 Acciones: Acciones Acciones --\u003e Simples Simples: Simples Simples --\u003e Asignaci√≥n Asignaci√≥n: Asignaci√≥n Asignaci√≥n --\u003e Expresi√≥n Expresi√≥n: Expresi√≥n Expresi√≥n --\u003e Incrementales Incrementales: Incrementales Incrementales --\u003e Contador Contador: Contador Incrementales --\u003e Acumulador Acumulador: Acumulador Expresi√≥n --\u003e Algebraicas Algebraicas: Algebraicas Expresi√≥n --\u003e Funcionales Funcionales: Funcionales Asignaci√≥n --\u003e Pura Pura: Pura Simples --\u003e Acci√≥nElemental Acci√≥nElemental: Acci√≥n Elemental Acciones --\u003e Estructuradas Estructuradas: Estructuradas Estructuradas --\u003e C√≠clicas C√≠clicas: C√≠clicas C√≠clicas --\u003e Pretest Pretest: Pre-test C√≠clicas --\u003e Posttest Posttest: Post-test C√≠clicas --\u003e Manejadaporcontador Manejadaporcontador: Manejada por contador Estructuradas --\u003e Condicionales Condicionales: Condicionales Condicionales --\u003e CondiSimples CondiSimples: Simples Condicionales --\u003e Alternativos Alternativos: Alternativos Condicionales --\u003e Selecci√≥nM√∫ltiple Selecci√≥nM√∫ltiple: Selecci√≥n M√∫ltiple Estructuradas --\u003e Acci√≥nconnombre Acci√≥nconnombre: Acci√≥n con nombre Aunque parezca abrumador, es crucial presentar todas las acciones en su conjunto para tener una visi√≥n global y comprensiva. De todas formas, voy a separarlas en dos grupos para que se puedan ver mejor. Comenzar√© mostrando las simples:\nstateDiagram-v2 Simples: Simples Simples --\u003e Asignaci√≥n Asignaci√≥n: Asignaci√≥n Asignaci√≥n --\u003e Expresi√≥n Expresi√≥n: Expresi√≥n Expresi√≥n --\u003e Incrementales Incrementales: Incrementales Incrementales --\u003e Contador Contador: Contador Incrementales --\u003e Acumulador Acumulador: Acumulador Expresi√≥n --\u003e Algebraicas Algebraicas: Algebraicas Expresi√≥n --\u003e Funcionales Funcionales: Funcionales Asignaci√≥n --\u003e Pura Pura: Pura Simples --\u003e Acci√≥nElemental Acci√≥nElemental: Acci√≥n Elemental Y ahora las complejas o estructuradas:\nstateDiagram-v2 Estructuradas: Estructuradas Estructuradas --\u003e C√≠clicas C√≠clicas: C√≠clicas C√≠clicas --\u003e Pretest Pretest: Pre-test C√≠clicas --\u003e Posttest Posttest: Post-test C√≠clicas --\u003e Manejadaporcontador Manejadaporcontador: Manejada por contador Estructuradas --\u003e Condicionales Condicionales: Condicionales Condicionales --\u003e CondiSimples CondiSimples: Simples Condicionales --\u003e Alternativos Alternativos: Alternativos Condicionales --\u003e Selecci√≥nM√∫ltiple Selecci√≥nM√∫ltiple: Selecci√≥n M√∫ltiple Estructuradas --\u003e Acci√≥nconnombre Acci√≥nconnombre: Acci√≥n con nombre "},{"id":7,"href":"/aed-docs/docs/teoria/estructuras-datos-simples/estructuras-datos-simples/","title":"Estructuras Datos Simples","section":"Docs","content":" Estructuras de Datos Simples # A la hora de elaborar un programa, es necesario utilizar datos. Por ejemplo, si queremos calcular el √°rea de un rect√°ngulo, debemos almacenar en la memoria de la computadora los valores de la base y la altura para luego multiplicarlos y obtener el √°rea.\nEs importante recordar que hay una diferencia entre grabar los datos en la memoria y grabarlos en el disco duro. Cuando hablamos de grabar en memoria, nos referimos a almacenar los datos en la RAM. Para hacer esto, utilizamos dos elementos: variables y constantes. Estos nos permiten guardar y manipular los datos necesarios para realizar los c√°lculos en el programa.\nVariables # Son elementos de almacenamiento de datos. Representan una direcci√≥n de memoria en donde se almacena un dato, y su contenido puede variar en el desarrollo del algoritmo. Constantes # Al igual que una variable, representa una zona de memoria en la cual se almacena un dato. Sin embargo su contenido no puede modificarse durante la ejecuci√≥n. Antes de asignarle un valor, debemos definirlas de la siguiente manera:\nVariables a : Entero Constantes a = Entero En este caso a es c√≥mo queremos nombrar a la variable/constante. Dependiendo de si es variable o constante, debemos usar el s√≠mbolo : | = seg√∫n corresponda. En este caso Entero es el tipo de datos que se asocia a la variable/constante, podemos usar cualquiera de los mencionados anteriormente. C√≥mo nombrar variables y constantes # Deben tener un nombre representativo.\n‚Äúa‚Äù es üí§ | ‚Äúcontpalabras‚Äù es üëº\nAdem√°s hay que tratar de abreviar las palabras claramente.\n‚Äúcontpalimpar‚Äù üëç\nY tambi√©n‚Ä¶ Letra chica No pueden iniciar con n√∫meros.\nej: 123var\nNo se distingue entre may√∫sculas y min√∫sculas.\nej: var y VAR\nNo tener espacios.\nej: esto es un nombre incorrecto: Entero\nNo tener ‚Äús√≠mbolos raros‚Äù.\ns√≠mbolos permitidos: ‚Äú-‚Äù o ‚Äú_‚Äù\nNo tiene que ser una palabra reservada\nej: leer, escribir\n"},{"id":8,"href":"/aed-docs/docs/teoria/operadores-operandos/","title":"Operadores Operandos","section":"Docs","content":" Operadores y Operandos # Los programas de computadora se basan en la realizaci√≥n de muchas operaciones aritm√©ticas y matem√°ticas de diversas complejidades.\nNoun: Operador /operasao/ Es el s√≠mbolo que determina el tipo de operaci√≥n o relaci√≥n que habr√° de establecerse entre los operandos para alcanzar un resultado. Los operadores nos permiten manipular datos, ya sean variables, constantes u otras expresiones. Podemos utilizarlos para transformar datos, controlar el flujo de ejecuci√≥n de un programa mediante decisiones y formar valores para asignar a otros datos.\nüëÅÔ∏è Ojito: El tipo de datos utilizado en una expresi√≥n est√° relacionado con los operadores utilizados. Y ¬øQu√© son esas expresiones mencionadas?\nNoun: Expresi√≥n /exprasao/ Es en s√≠ntesis, una secuencia de operadores y operandos que realizan un c√°lculo. Ejemplo: 3x2; En esta expresi√≥n, el s√≠mbolo x se utiliza como el operador de multiplicaci√≥n, mientras que los n√∫meros 3 y 2 son los operandos involucrados en la operaci√≥n.\nHay varios tipos de operadores disponibles:\nOperador de Asignaci√≥n # Es el m√°s b√°sico y se utiliza para asignar un valor a una variable. En muchos lenguajes de programaci√≥n, se representa con el s√≠mbolo :=. Este operador indica que el valor a la derecha de := ser√° asignado a la variable que est√° a la izquierda del mismo.\nEjemplo:\nEdad := 29 precio := 25.45 Acordate que la acci√≥n de asignar es destructiva üí£, ya que el valor que tuviera la variable antes de la asignaci√≥n se pierde y se reemplaza por el nuevo valor.\nOperadores Aritm√©ticos # Son operadores binarios, lo que significa que requieren dos operandos para funcionar. Estos operadores realizan las operaciones aritm√©ticas b√°sicas y utilizan operandos num√©ricos para proporcionar resultados matem√°ticos.\nOperador Descripci√≥n + Suma - Resta * Multiplicaci√≥n / Divisi√≥n Real mod Resto Divisi√≥n Entera div Cociente Divisi√≥n Entera ** Porenciaci√≥n Operadores Relacionales # Se utilizan para realizar comparaciones de igualdad, desigualdad y relaciones de menor o mayor entre valores. Estos operadores son utilizados para expresar condiciones en algoritmos y proporcionan resultados l√≥gicos.\nOperador Significado = Igual a \u0026lt;\u0026gt; No Igual a \u0026gt; Mayor que \u0026gt;= Mayor o Igual que \u0026lt; Menor que \u0026lt;= Menor o Igual que üí° Trucazo: Para recordar c√≥mo funcionan los operadores de menor y mayor se puede imaginar que el s√≠mbolo se asemeja a un pico de pato y que los ojos del pato est√°n en el punto donde se cruzan las l√≠neas ''\u0026lt; cuak!. Record√° que el pato siempre mira al operando m√°s grande üü°üîµ \u0026gt;''. Este truco puede ser √∫til si alguien pas√≥ la primaria por acomodo o debido a la pandemia y no est√° familiarizado con estos operadores. Acordate tambi√©n que no existe el operador ‚â†.\nOperadores L√≥gicos # Los operadores l√≥gicos, nos permiten tomar decisiones basadas en la verdad y la falsedad de las proposiciones. Nos gu√≠an a trav√©s del laberinto de la l√≥gica y nos permiten construir algoritmos que act√∫an con discernimiento.\nOperador Descripci√≥n Uso AND | ·¥ß | Y Operador l√≥gico AND a Y b OR | ·¥† | O Operador l√≥gico OR a O b NO Operador de Negaci√≥n a NO b Y las tablas de verdad de los mismos:\nDisyunci√≥n A B A o B Falso ‚ùå Falso ‚ùå Falso ‚ùå Falso ‚ùå Verdad ‚úî Verdad ‚úî Verdad ‚úî Falso ‚ùå Verdad ‚úî Verdad ‚úî Verdad ‚úî Verdad ‚úî Conjunci√≥n A B A y B Falso ‚ùå Falso ‚ùå Falso ‚ùå Falso ‚ùå Verdad ‚úî Falso ‚ùå Verdad ‚úî Falso ‚ùå Falso ‚ùå Verdad ‚úî Verdad ‚úî Verdad ‚úî Negaci√≥n A No(A) Falso ‚ùå Verdad ‚úî Verdad ‚úî Falso ‚ùå Prioridad de los Operadores # La precedencia (orden de resoluci√≥n) funciona similar al de las matem√°ticas:\nOperadores Descripci√≥n + | - | no Signo m√°s, Signo menos y Negaci√≥n ** Potencia * | / | div | mod Multiplicaci√≥n, Divisi√≥n real, Divisi√≥n entera y M√≥dulo + | - Suma y Resta + Concatenaci√≥n \u0026lt; | \u0026lt;= | \u0026gt; | \u0026gt;= Menor que, Menor o igual que, Mayor que, Mayor o igual que = | \u0026lt;\u0026gt; Igual que y Distinto que y Conjunci√≥n o Disyunci√≥n "},{"id":9,"href":"/aed-docs/docs/teoria/prueba-escritorio/","title":"Prueba Escritorio","section":"Docs","content":" Prueba de escritorio # Es una forma de verificar la precisi√≥n y efectividad de un algoritmo mediante la simulaci√≥n manual de su ejecuci√≥n con datos de entrada predefinidos.\nLa prueba de escritorio garantiza la calidad del programa, mejora la comprensi√≥n y promueve el crecimiento del programador.\nPara elaborar una Prueba de Escritorio # Se utiliza una tabla con encabezados que representan las variables utilizadas en el algoritmo. Se van llenando los valores que toman estas variables, paso a paso, siguiendo el flujo indicado por el algoritmo hasta llegar al final. Cada fila de la tabla representa el estado de las variables en un momento espec√≠fico.\nEstado a b suma 1. a := 2; E0 = Einicial ? ? ? 2. b := 3; E1 2 ? ? 3. suma := a + b; E2 2 3 ? 4. suma := suma - 1; E3 2 3 5 E4 = Efinal 2 3 4 La prueba consta de dos etapas: La primera prueba el programa con datos f√°ciles, la segunda busca datos que hagan fallar el algoritmo para detectar errores adicionales. Si el algoritmo no falla, se considera correcto y terminado. "},{"id":10,"href":"/aed-docs/docs/teoria/pseudocodigo/","title":"Pseudocodigo","section":"Docs","content":" Pseudoc√≥digo # Los algoritmos trascienden a los lenguajes de programaci√≥n, pudiendose representar de diversas maneras. En esta cursada, solo nos centraremos en el pseudoc√≥digo, pero pueden investigar sobre las dem√°s formas por su cuenta.\nPero entonces ¬øqu√© es ese tal pseudoc√≥digo?\nNoun: Pseudoc√≥digo /pseudo/ Es un lenguaje similar al ingl√©s utilizado para representar estructuras de control en programaci√≥n estructurada.\nAunque es un primer borrador, debe traducirse a un lenguaje de programaci√≥n para ser ejecutado en una computadora.\n¬øY qu√© es esa programaci√≥n estructurada?\nLa programaci√≥n estructurada es un enfoque met√≥dico y cient√≠fico para dise√±ar y escribir programas, alej√°ndose del m√©todo de prueba y error.\nSe fundamenta en dos aspectos clave:\nLas Caracter√≠sticas de un Algoritmo stateDiagram-v2 Uno: 1. Posee un solo punto de Entrada y de salida. Uno --\u003e Dos Dos: 2. Todas las acciones deben ser accesibles. note right of Dos Debe haber al menos un camino desde el principio hasta el final que pase por cada accion. end note Dos --\u003e Tres Tres: 3. No posee ciclos o bucles infinitos. El Teorema de la Programaci√≥n Estructurada: postula que todo algoritmo estructurado puede ser escrito utilizando √∫nicamente tres tipos de estructuras de control secuenciales. Secuenciales Condicionales Repetitivas Ventajas del pseudoc√≥digo ... El uso de Pseudoc√≥digo en lugar de Diagramas de Flujo tiene ventajas, como la capacidad de representar de manera sencilla operaciones repetitivas complejas. Adem√°s, es f√°cil convertir una soluci√≥n en Pseudoc√≥digo a un programa en cualquier lenguaje de programaci√≥n. Siguiendo las reglas, se pueden visualizar claramente los niveles de cada operaci√≥n. "},{"id":11,"href":"/aed-docs/docs/teoria/tipos-datos/alfanumericos/","title":"Alfanumericos","section":"Docs","content":" Alfanumericos # En una presentaci√≥n del profe Axel, se mencionaban a los alfanum√©ricos como un conjunto de caracteres.\nEjemplo:\n\u0026#34;hola se√±or kiosquero...\u0026#34; | \u0026#34;192./aa321\u0026#34; | \u0026#34;rm -rf /\u0026#34; | \u0026#34;\u0026amp;asd\u0026#34; | ... Y a estos, se les puede especificar su longitud de la siguiente forma:\nAlfanum√©rico(20) o AN(20) En este caso, se quiere que el limite de car√°cteres sea 20.\nCar√°cter # Cuando se piensa, en cada letra, n√∫mero o s√≠mbolo solitario, la figura del \u0026ldquo;car√°cter\u0026rdquo; emerge ante nosotros.\nEjemplo:\n\u0026#34;1\u0026#34; | \u0026#34;a\u0026#34; | \u0026#34;B\u0026#34; | \u0026#34;\u0026amp;\u0026#34; | ... "},{"id":12,"href":"/aed-docs/docs/teoria/tipos-datos/logicos/","title":"Logicos","section":"Docs","content":" L√≥gicos o Booleanos # El tipo de dato que solo puede tener dos valores: Falso ‚ùå y verdadero ‚úîÔ∏è. Se utiliza, por ejemplo, cuando se desea determinar si un n√∫mero es primo o no.\nEjemplo:\nVerdadero | Falso "},{"id":13,"href":"/aed-docs/docs/teoria/tipos-datos/numericos/","title":"Numericos","section":"Docs","content":" Tipos de Datos Numericos # Para iniciar con esta secci√≥n con un chiste, que no me acuerdo de d√≥nde lo rob√©\u0026hellip;\nü§° \u0026quot;Dios es real, a menos que sea declarado entero.\u0026quot; Ya est√° loco, me voy al \u0026hellip;\nEnteros # Son un conjunto finito de valores que no contienen partes fraccionarias o decimales, y pueden ser tanto positivos como negativos. Se utilizan para representar cantidades completas, como la edad de una persona, que siempre se considera un valor entero.\nEjemplo:\n4 | 434 | 565546 | ... Reales # Son un subconjunto de los n√∫meros reales que siempre incluyen un punto decimal y pueden ser positivos o negativos. Se utilizan para representar valores que tienen componentes fraccionarios, como el peso de una persona.\nEjemplo:\n3.14 | 12838.49586 | ... En la mayor√≠a de los lenguajes de programaci√≥n, es necesario utilizar el punto (.) en lugar de la coma (,) al escribir n√∫meros reales. Esto se debe a que estos lenguajes est√°n inspirados en el ingl√©s y utilizan esa sintaxis. Se recomienda seguir esta convenci√≥n al escribir pseudoc√≥digo tambi√©n, aunque desconozco su obligatoriedad.\n\u0026hellip;\nü§î ¬øPor qu√© el √©nfasis en diferenciar los datos num√©ricos?\nM√°s adelante, nos encontraremos con operadores espec√≠ficos que diferencian entre la division entera y real. Esto probablemente se deba a que las computadoras a bajo nivel sean malas a la hora de dividir. "},{"id":14,"href":"/aed-docs/docs/teoria/tipos-datos/tipos-datos/","title":"Tipos Datos","section":"Docs","content":" Tipos de Datos # En esta etapa inicial, nos enfocaremos en algunos tipos de datos fundamentales, esto solo por ahora, m√°s adelante la cosa se complica.\nüî¢ Numericos üî† Alfanumericos üö¶ L√≥gicos "},{"id":15,"href":"/aed-docs/docs/","title":"Docs","section":"Bienvenidos","content":""}]