<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bienvenidos on Contraband Notes | AED 23 K1.6</title><link>https://chipacu.github.io/aed-docs/</link><description>Recent content in Bienvenidos on Contraband Notes | AED 23 K1.6</description><generator>Hugo -- gohugo.io</generator><language>es-ar</language><atom:link href="https://chipacu.github.io/aed-docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Concepto de Algortmos</title><link>https://chipacu.github.io/aed-docs/docs/concept-iniciales/algoritmos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chipacu.github.io/aed-docs/docs/concept-iniciales/algoritmos/</guid><description>Concepto de Algor√≠tmos # En un mundo digital cada vez m√°s complejo, los algoritmos emergen como poderosas secuencias de instrucciones y reglas que desbloquean las puertas del conocimiento, trazando caminos que resuelven problemas y moldean nuestras experiencias.
Formalmente hablando, ser√≠a:
Noun: Algor√≠tmo /Ààal…°…ôr…™√∞(…ô)m/ Una secuencia finita de instrucciones, que describen de modo preciso las operaciones que una computadora debe realizar para ejecutar una tarea determinada en un tiempo finito. Los pasos para crear un algoritmo son los siguientes:</description></item><item><title>Condicionales</title><link>https://chipacu.github.io/aed-docs/docs/estruc-control/condicionales/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chipacu.github.io/aed-docs/docs/estruc-control/condicionales/</guid><description>Condicionales # Hasta este punto, los algoritmos que hemos definido se ejecutan de manera secuencial, es decir, una sentencia despu√©s de otra. Esta forma de programaci√≥n es adecuada para programas simples.
flowchart LR START:::hidden --> accion1 accion1[Acci√≥n 1] accion1 --> accion2 accion2[Acci√≥n 2] accion2 --> STOP:::hidden classDef hidden display: none; ACCION Ejemplo1 ES AMBIENTE a,doble: entero PROCESO ESCRIBIR(‚ÄúIngrese el n√∫mero: ‚Äù) LEER(a) doble := a * 2 ESCRIBIR(‚ÄúResultado es: ‚Äù,doble) FIN_ACCION Sin embargo, para resolver problemas m√°s complejos, es necesario tener la capacidad de controlar qu√© sentencias se ejecutan y cu√°ndo.</description></item><item><title>Nuestros Profesores</title><link>https://chipacu.github.io/aed-docs/docs/info-provechosa/profesores/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chipacu.github.io/aed-docs/docs/info-provechosa/profesores/</guid><description> Nuestros Profesores # ¬°Honrad a aquellos que os gu√≠an con sabidur√≠a y experiencia!
Teor√≠a Mirtha Giovannini Pr√°ctica Axel Robles Valentina Sosa Mar√≠a Jos√© Ojeda Celina Gonz√°lez Florencia Galarza Renzo Urturi Santiago Scacciaferro Wyss</description></item><item><title>Proceso, Acci√≥n y Estado</title><link>https://chipacu.github.io/aed-docs/docs/concept-iniciales/proceso-accion-estado/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chipacu.github.io/aed-docs/docs/concept-iniciales/proceso-accion-estado/</guid><description>Proceso, Acci√≥n y Estado # Proceso # Un proceso, en su esencia m√°s pura, es una diminuta entidad, cuidadosamente planificada por un Sistema Operativo, emerge como una unidad elemental de trabajo.
Formalmente:
Noun: Proceso /process/ Una unidad de actividad que se caracteriza por la ejecuci√≥n de una secuencia de instrucciones, un estado actual, y un conjunto de recursos de los sistemas asociados (hardware). Acci√≥n # En el anterior &amp;ldquo;ejemplo 1&amp;rdquo; de algoritmos, notar√°s que cada paso comienza con un verbo como &amp;ldquo;Solicitar&amp;rdquo;, &amp;ldquo;Ingresar&amp;rdquo;, &amp;ldquo;Dividir&amp;rdquo;, entre otros.</description></item><item><title>Tipos de Datos</title><link>https://chipacu.github.io/aed-docs/docs/elem-basics/tipos-datos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chipacu.github.io/aed-docs/docs/elem-basics/tipos-datos/</guid><description>Tipos de datos # En esta etapa inicial, nos enfocaremos en algunos tipos de datos fundamentales, esto solo por ahora, m√°s adelante la cosa se complica.
Numericos # Para iniciar con esta secci√≥n, un chiste&amp;hellip;
ü§° &amp;quot;Dios es real, a menos que sea declarado entero.&amp;quot; Ya est√° loco, me voy al &amp;hellip;
Enteros # Son un conjunto finito de valores que no contienen partes fraccionarias o decimales, y pueden ser tanto positivos como negativos.</description></item><item><title>Antes de Arrancar</title><link>https://chipacu.github.io/aed-docs/docs/antes-arrancar/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chipacu.github.io/aed-docs/docs/antes-arrancar/</guid><description>Antes de Arrancar # Dejame darte algunos consejos, che. No s√© cu√°nto te sirvan, porque, te cuento que es la primera vez que estoy cursando esta materia (me cambi√© de carrera), y hasta ahora no la aprob√©. Simplemente creo que estos consejos pueden serte √∫tiles para adaptarte m√°s r√°pido, sobre todo considerando los momentos complicados al principio del cursado. Seguramente, a medida que avance, vaya agregando m√°s, si te sabes alguno, no dudes en compartirlo.</description></item><item><title>Condiciones para Vencer</title><link>https://chipacu.github.io/aed-docs/docs/info-provechosa/condiciones/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chipacu.github.io/aed-docs/docs/info-provechosa/condiciones/</guid><description>Modos y Condiciones para vencer # Modo de evaluarnos # En tu traves√≠a acad√©mica por los dominios de los algoritmos, ser√°s sometido a las siguientes pruebas y desaf√≠os:
3 Parciales, precedidos de un Trabajo Pr√°ctico cada uno. 2 Laboratorios, uno de Pascal y otro de C. 20 Cuestionarios del Campus Virtual. Condiciones para aprobar # Para obtener el triunfo y aprobar de forma directa, deber√°s superar los siguientes desaf√≠os con destreza y sabidur√≠a:</description></item><item><title>Estructuras de Datos Simples</title><link>https://chipacu.github.io/aed-docs/docs/elem-basics/estructuras-datos-simples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chipacu.github.io/aed-docs/docs/elem-basics/estructuras-datos-simples/</guid><description>Estructuras de Datos Simples # A la hora de elaborar un programa, es necesario utilizar datos. Por ejemplo, si queremos calcular el √°rea de un rect√°ngulo, debemos almacenar en la memoria de la computadora los valores de la base y la altura para luego multiplicarlos y obtener el √°rea.
Es importante recordar que hay una diferencia entre grabar los datos en la memoria y grabarlos en el disco duro. Cuando hablamos de grabar en memoria, nos referimos a almacenar los datos en la RAM.</description></item><item><title>Repetitivas</title><link>https://chipacu.github.io/aed-docs/docs/estruc-control/repetitivas/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chipacu.github.io/aed-docs/docs/estruc-control/repetitivas/</guid><description>Repetitivas # Durante la creaci√≥n de programas, es com√∫n encontrarse con la necesidad de repetir operaciones varias veces. Para esto, es importante conocer las estructuras de algoritmos que permiten la repetici√≥n de acciones un n√∫mero determinado de veces.
graph TB START:::hidden --> accion1 accion1[Accion 1] --> input{Condici√≥n} input -- Verdadero --> execute[Instrucciones del Bucle] execute --> input input -- Falso --> accion2[Accion2] accion2 --> END:::hidden Estas estructuras se llaman bucles y cada repetici√≥n del bucle se denomina iteraci√≥n.</description></item><item><title>Links de Excalibur</title><link>https://chipacu.github.io/aed-docs/docs/info-provechosa/excalibur/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chipacu.github.io/aed-docs/docs/info-provechosa/excalibur/</guid><description>Links de Excalibur # Biolink # ¬°El legendario Biolink se alza frente a ti! En este prodigioso artefacto, descubrir√°s enlaces de gran val√≠a y la posibilidad de completar los formularios de asistencia a clase.
Sin embargo, ten cuidado, pues sus ra√≠ces ocultas podr√≠an asfixiarte de informaci√≥n publicitaria. Te sugiero sin reparo, que lo abras con un ad-blocker.
üîó Biolink Gu√≠a de Pr√°ctica # Pocas p√°ginas ostentan tanta belleza y utilidad como la aqu√≠ presentada.</description></item><item><title>Operadores y Operandos</title><link>https://chipacu.github.io/aed-docs/docs/elem-basics/operadores-operandos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chipacu.github.io/aed-docs/docs/elem-basics/operadores-operandos/</guid><description>Operadores y Operandos # Los programas de computadora se basan en la realizaci√≥n de muchas operaciones aritm√©ticas y matem√°ticas de diversas complejidades.
Noun: Operador /operasao/ Es el s√≠mbolo que determina el tipo de operaci√≥n o relaci√≥n que habr√° de establecerse entre los operandos para alcanzar un resultado. Los operadores nos permiten manipular datos, ya sean variables, constantes u otras expresiones. Podemos utilizarlos para transformar datos, controlar el flujo de ejecuci√≥n de un programa mediante decisiones y formar valores para asignar a otros datos.</description></item><item><title>Entrada y Salida de Datos</title><link>https://chipacu.github.io/aed-docs/docs/elem-basics/entrada-salida/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chipacu.github.io/aed-docs/docs/elem-basics/entrada-salida/</guid><description>Entradas y Salida de Datos # Son dos acciones con nombre que se emplean en los primeros algoritmos. La informaci√≥n que compartir√© a continuaci√≥n est√° basada en las presentaciones de las clases pr√°cticas, as√≠ como en algunos recursos de las clases de teor√≠a.
Salida de datos # Como un susurro de conocimiento, la palabra ¬´escribir¬ª transmite los resultados del programa al mundo exterior. Los datos, imbuidos de sentido y prop√≥sito, pueden ser plasmados por pantalla.</description></item><item><title>Pseudoc√≥digo</title><link>https://chipacu.github.io/aed-docs/docs/pseudocodigo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chipacu.github.io/aed-docs/docs/pseudocodigo/</guid><description>Pseudoc√≥digo # Los algoritmos trascienden a los lenguajes de programaci√≥n, pudiendose representar de diversas maneras. En esta cursada, solo nos centraremos en el pseudoc√≥digo, pero pueden investigar sobre las dem√°s formas por su cuenta.
Pero entonces ¬øqu√© es ese tal pseudoc√≥digo?
Noun: Pseudoc√≥digo /pseudo/ Es un lenguaje similar al ingl√©s utilizado para representar estructuras de control en programaci√≥n estructurada.
Aunque es un primer borrador, debe traducirse a un lenguaje de programaci√≥n para ser ejecutado en una computadora.</description></item><item><title>Estructura B√°sica Pseudoc√≥digo</title><link>https://chipacu.github.io/aed-docs/docs/elem-basics/estructura-pseudo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chipacu.github.io/aed-docs/docs/elem-basics/estructura-pseudo/</guid><description>Estructura B√°sica Pseudoc√≥digo # Una vez tengas tu editor de c√≥digo y estes medio familiarizado con los conceptos b√°sicos de pseudoc√≥digo y sus elementos, vas a estar listo para enfrentarte a los primeros ejercicios del pr√°ctica.
Bueno, quiz√°s no, te faltan las partes m√°s importantes, la estructura que funje como esqueleto de tu algor√≠tmo.
Accion Un_ejemplo es Ambiente // aqu√≠ se declaran variables/c, se definen funciones/p... Algoritmo // donde ocurre la magia.</description></item><item><title>Prueba de Escritorio</title><link>https://chipacu.github.io/aed-docs/docs/prueba-escritorio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://chipacu.github.io/aed-docs/docs/prueba-escritorio/</guid><description>Prueba de escritorio # Es una forma de verificar la precisi√≥n y efectividad de un algoritmo mediante la simulaci√≥n manual de su ejecuci√≥n con datos de entrada predefinidos.
La prueba de escritorio garantiza la calidad del programa, mejora la comprensi√≥n y promueve el crecimiento del programador.
Para elaborar una Prueba de Escritorio # Se utiliza una tabla con encabezados que representan las variables utilizadas en el algoritmo. Se van llenando los valores que toman estas variables, paso a paso, siguiendo el flujo indicado por el algoritmo hasta llegar al final.</description></item></channel></rss>